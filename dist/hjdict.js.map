{"version":3,"file":"hjdict.js","sources":["../src/utils.js","../src/parser/jp-cn.js","../src/index.js"],"sourcesContent":["import fetch from 'node-fetch'\r\n\r\nlet to_unicode = (text) => {\r\n  return text.replace(/\\\\u[\\dA-F]{4}/gi, match => {\r\n    return String.fromCharCode(parseInt(match.replace(/\\\\u/g, ''), 16));\r\n  })\r\n}\r\n\r\nlet request = (url, callback) => {\r\n  (fetch || window.fetch)(url)\r\n  .then(r => r.text())\r\n    .then(raw => {\r\n      let text = to_unicode(raw)\r\n        .replace(/\\\\t/g, '') // Remove redundant slash\r\n        .replace(/\\\\\"/g, '\"') // Remove redundant slash\r\n      callback(text)\r\n    }).catch(e => {\r\n      console.error(e)\r\n      callback(null, e)\r\n    })\r\n}\r\n\r\nlet match_group = (string, regx, index, value) => {\r\n  if (index == null)\r\n    index = 1\r\n\r\n  let matches = string.match(regx)\r\n  if (!matches)\r\n    return value\r\n  return matches[index] || value\r\n}\r\n\r\nexport { to_unicode, request, match_group }\r\n","import { match_group } from '../utils'\r\n\r\nconst REG_CANDIDATE_BLOCK = /<div style=\"clear:both\">(.*?<div id=\"com_panel_.*?<\\/div>)/g\r\nconst REG_WORD_KANJI = /<span class=\"hjd_Green\">\\[<font color=red>(.*?)<\\/font>\\]<\\/span>/\r\nconst REG_WORD_KANA = /<span title=\"假名\">\\[(.*?)\\]<\\/span>/\r\nconst REG_WORD_ROMAN = /<span title=\"罗马音\".*?\\[(.*?)\\]<\\/font><\\/span>/\r\nconst REG_WORD_MP3 = /class=\"hjd_fl\">(.*?)<\\/span>/\r\nconst REG_WORD_DETAILS = /class=\"hjd_jp_explain\">(.*?)<\\/div>/\r\nconst REG_WORD_DETAILS_EXAMPLE_LIST = /<img.*?>(.*?)\\/(.*)/\r\nconst REG_WORD_DETAILS_PART_OF_SPEECH = /【(.*?)】/\r\n\r\nexport default {\r\n  url(query) {\r\n    return 'http://dict.hjenglish.com/services/huaci/jp_web_ajax.ashx?type=jc&w=' + query\r\n  },\r\n  parser(html) {\r\n    let candidates = []\r\n    for (let raw_block of html.match(REG_CANDIDATE_BLOCK)) {\r\n      let block = {}\r\n      block.kanji = match_group(raw_block, REG_WORD_KANJI)\r\n      block.kana = match_group(raw_block, REG_WORD_KANA)\r\n      block.roman = match_group(raw_block, REG_WORD_ROMAN)\r\n      block.mp3 = match_group(raw_block, REG_WORD_MP3)\r\n      block.details = _parse_details(match_group(raw_block, REG_WORD_DETAILS))\r\n      candidates.push(block)\r\n    }\r\n    return candidates\r\n  },\r\n}\r\n\r\nfunction _parse_details(raw_details) {\r\n  raw_details = raw_details || ''\r\n  let details = []\r\n  for (let raw_part of raw_details.split('<b>').filter(i => {return i && i.trim()})) {\r\n    let raw_items = (raw_part\r\n        .split('</b>')[1] || '')\r\n      .split('<br/>')\r\n      .filter(i => { return i && i.trim() })\r\n    let items = []\r\n    for (let i of raw_items) {\r\n      let matches = i.match(REG_WORD_DETAILS_EXAMPLE_LIST)\r\n      if (matches) {\r\n        items.push({\r\n          type: 'list',\r\n          jp: matches[1],\r\n          cn: matches[2]\r\n        })\r\n      } else {\r\n        items.push({ type: 'text', text: i.trim() })\r\n      }\r\n    }\r\n    details.push({\r\n      part_of_speech: match_group(raw_part, REG_WORD_DETAILS_PART_OF_SPEECH),\r\n      items\r\n    })\r\n  }\r\n  return details\r\n}\r\n","import { request } from './utils'\r\nimport jp_cn from './parser/jp-cn'\r\n\r\nlet OPTIONS = {\r\n  cors_proxy: ''\r\n}\r\n\r\nlet VOID_CALLBACK = function () {}\r\n\r\nexport default {\r\n  version: '0.0.1',\r\n  set(options) {\r\n    OPTIONS = Object.assign(OPTIONS, options)\r\n  },\r\n  set_cors_proxy(proxy) {\r\n    this.set({ cors_proxy: proxy })\r\n  },\r\n  jp2cn(query, callback) {\r\n    this.query({\r\n      parser: jp_cn.parser,\r\n      url: jp_cn.url,\r\n      query,\r\n      callback\r\n    })\r\n  },\r\n  query(option) {\r\n    option = Object.assign({}, OPTIONS, option)\r\n\r\n    let url = option.url(option.query)\r\n    url = encodeURI(url)\r\n    if (option.cors_proxy) {\r\n      if (typeof option.cors_proxy === 'function')\r\n        url = option.cors_proxy(url)\r\n      else\r\n        url = option.cors_proxy + url\r\n    }\r\n\r\n    var html = request(url, (data, e) => {\r\n      let returns = {\r\n        query: option.query\r\n      }\r\n\r\n      if (e) {\r\n        returns.error = e.message\r\n      } else {\r\n        returns.candidates = option.parser(data)\r\n      }\r\n\r\n      (option.callback || VOID_CALLBACK)(returns)\r\n    })\r\n  }\r\n}\r\n"],"names":["to_unicode","text","replace","String","fromCharCode","parseInt","match","request","url","callback","fetch","window","then","r","raw","catch","error","e","match_group","string","regx","index","value","matches","REG_CANDIDATE_BLOCK","REG_WORD_KANJI","REG_WORD_KANA","REG_WORD_ROMAN","REG_WORD_MP3","REG_WORD_DETAILS","REG_WORD_DETAILS_EXAMPLE_LIST","REG_WORD_DETAILS_PART_OF_SPEECH","query","html","candidates","raw_block","block","kanji","kana","roman","mp3","details","_parse_details","push","raw_details","split","filter","i","trim","raw_part","raw_items","items","type","OPTIONS","VOID_CALLBACK","options","Object","assign","proxy","set","cors_proxy","jp_cn","parser","option","encodeURI","data","returns","message"],"mappings":"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"}