{"version":3,"file":"hjdict.js","sources":["../src/utils.js","../src/parser/commons.js","../src/parser/cn-jp.js","../src/parser/jp-cn.js","../src/index.js"],"sourcesContent":["import fetch from 'node-fetch'\r\n\r\nlet to_unicode = (text) => {\r\n  return text.replace(/\\\\u[\\dA-F]{4}/gi, match => {\r\n    return String.fromCharCode(parseInt(match.replace(/\\\\u/g, ''), 16));\r\n  })\r\n}\r\n\r\nlet request = (url, callback) => {\r\n  (fetch || window.fetch)(url)\r\n  .then(r => r.text())\r\n    .then(raw => {\r\n      let text = to_unicode(raw)\r\n        .replace(/\\\\t/g, '') // Remove redundant slash\r\n        .replace(/\\\\\"/g, '\"') // Remove redundant slash\r\n      callback(text)\r\n    }).catch(e => {\r\n      console.error(e)\r\n      callback(null, e)\r\n    })\r\n}\r\n\r\nlet match_group = (string, regx, index, value) => {\r\n  if (index == null)\r\n    index = 1\r\n\r\n  let matches = string.match(regx)\r\n  if (!matches)\r\n    return value\r\n  return matches[index] || value\r\n}\r\n\r\nexport { to_unicode, request, match_group }\r\n","import { match_group } from '../utils'\r\n\r\nconst REG_WORD_DETAILS_EXAMPLE_LIST = /<img.*?>(.*?)\\/(.*)/\r\nconst REG_WORD_DETAILS_PART_OF_SPEECH = /【(.*?)】/\r\n\r\nexport function cnjp_parse_details(raw_details) {\r\n  raw_details = (raw_details || '').trim()\r\n  let details = []\r\n  let raw_parts = raw_details.split('<b>').filter(i => { return i && i.trim() }) || []\r\n  if (raw_parts.length) {\r\n    for (let raw_part of raw_parts) {\r\n      let raw_items = (raw_part\r\n          .split('</b>')[1] || '')\r\n        .split('<br/>')\r\n        .filter(i => { return i && i.trim() })\r\n      let items = []\r\n      for (let i of raw_items) {\r\n        let matches = i.match(REG_WORD_DETAILS_EXAMPLE_LIST)\r\n        if (matches) {\r\n          items.push({\r\n            type: 'list',\r\n            jp: matches[1],\r\n            cn: matches[2]\r\n          })\r\n        } else {\r\n          items.push({ type: 'text', text: i.trim() })\r\n        }\r\n      }\r\n      details.push({\r\n        part_of_speech: match_group(raw_part, REG_WORD_DETAILS_PART_OF_SPEECH),\r\n        items\r\n      })\r\n    }\r\n  } else if (raw_details) {\r\n    details.push({ items: [{ type: 'text', text: raw_details }] })\r\n  }\r\n  return details\r\n}\r\n","import { match_group } from '../utils'\r\nimport { cnjp_parse_details } from './commons'\r\n\r\nconst QUERY_TYPE = 'cj'\r\nconst REG_CANDIDATE_BLOCK = /<div style=\"clear:both\">(.*?<div id=\"com_panel_.*?<\\/div>)/g\r\nconst REG_NODATA = /id='hjd_nodata_msg'>(.*?)<\\/div>/\r\nconst REG_WORD_HANZI = /<span class=\"hjd_Green\">\\[(.*?)\\]<\\/span>/\r\nconst REG_WORD_DETAILS = /class=\"hjd_jp_explain\">(.*?)<\\/div>/\r\n\r\nexport default {\r\n  url(query) {\r\n    return 'http://dict.hjenglish.com/services/huaci/jp_web_ajax.ashx?type=' + QUERY_TYPE + '&w=' + query\r\n  },\r\n  parser(html) {\r\n    console.log(html)\r\n    let explains = []\r\n    let matches = html.match(REG_CANDIDATE_BLOCK)\r\n    if (matches)\r\n      for (let raw_block of matches) {\r\n        let block = {}\r\n        block.primary = match_group(raw_block, REG_WORD_HANZI)\r\n        block.details = cnjp_parse_details(match_group(raw_block, REG_WORD_DETAILS))\r\n        explains.push(block)\r\n      }\r\n    return { from: 'cn', to: 'jp', explains }\r\n  }\r\n}\r\n","import { match_group } from '../utils'\r\nimport { cnjp_parse_details } from './commons'\r\n\r\nconst QUERY_TYPE = 'jc'\r\nconst REG_CANDIDATE_BLOCK = /<div style=\"clear:both\">(.*?<div id=\"com_panel_.*?<\\/div>)/g\r\nconst REG_WORD_KANJI = /<span class=\"hjd_Green\">\\[<font color=red>(.*?)<\\/font>\\]<\\/span>/\r\nconst REG_WORD_KANA = /<span title=\"假名\">\\[(.*?)\\]<\\/span>/\r\nconst REG_WORD_ROMAN = /<span title=\"罗马音\".*?\\[(.*?)\\]<\\/font><\\/span>/\r\nconst REG_WORD_MP3 = /class=\"hjd_fl\">(.*?)<\\/span>/\r\nconst REG_WORD_DETAILS = /class=\"hjd_jp_explain\">(.*?)<\\/div>/\r\n\r\nexport default {\r\n  url(query) {\r\n    return 'http://dict.hjenglish.com/services/huaci/jp_web_ajax.ashx?type=' + QUERY_TYPE + '&w=' + query\r\n  },\r\n  parser(html) {\r\n    let explains = []\r\n    let matches = html.match(REG_CANDIDATE_BLOCK)\r\n    if (matches)\r\n      for (let raw_block of matches) {\r\n        let block = {}\r\n        block.primary = match_group(raw_block, REG_WORD_KANJI)\r\n        block.secondary = match_group(raw_block, REG_WORD_KANA)\r\n        block.tertiary = match_group(raw_block, REG_WORD_ROMAN)\r\n        block.mp3 = match_group(raw_block, REG_WORD_MP3)\r\n        block.details = cnjp_parse_details(match_group(raw_block, REG_WORD_DETAILS))\r\n        explains.push(block)\r\n      }\r\n    return { from: 'jp', to: 'cn', explains }\r\n  }\r\n}\r\n","import { request } from './utils'\r\nimport { jp2cn, cn2jp } from './parser/index'\r\n\r\nlet OPTIONS = {\r\n  cors_proxy: ''\r\n}\r\n\r\nlet VOID_CALLBACK = function () {}\r\n\r\nexport default {\r\n  version: '0.0.2',\r\n  set(options) {\r\n    OPTIONS = Object.assign(OPTIONS, options)\r\n  },\r\n  set_cors_proxy(proxy) {\r\n    this.set({ cors_proxy: proxy })\r\n  },\r\n  jp2cn(query, callback) {\r\n    this.query({\r\n      parser: jp2cn.parser,\r\n      url: jp2cn.url,\r\n      query,\r\n      callback\r\n    })\r\n  },\r\n  cn2jp(query, callback) {\r\n    this.query({\r\n      parser: cn2jp.parser,\r\n      url: cn2jp.url,\r\n      query,\r\n      callback\r\n    })\r\n  },\r\n  query(option) {\r\n    option = Object.assign({}, OPTIONS, option)\r\n\r\n    let url = option.url(option.query)\r\n    url = encodeURI(url)\r\n    if (option.cors_proxy) {\r\n      if (typeof option.cors_proxy === 'function')\r\n        url = option.cors_proxy(url)\r\n      else\r\n        url = option.cors_proxy + url\r\n    }\r\n\r\n    var html = request(url, (data, e) => {\r\n      let returns = {\r\n        query: option.query\r\n      }\r\n\r\n      if (e) {\r\n        returns.error = e\r\n      } else {\r\n        returns = Object.assign(returns, option.parser(data))\r\n      }\r\n\r\n      (option.callback || VOID_CALLBACK)(returns)\r\n    })\r\n  }\r\n}\r\n"],"names":["to_unicode","text","replace","String","fromCharCode","parseInt","match","request","url","callback","fetch","window","then","r","raw","catch","error","e","match_group","string","regx","index","value","matches","REG_WORD_DETAILS_EXAMPLE_LIST","REG_WORD_DETAILS_PART_OF_SPEECH","cnjp_parse_details","raw_details","trim","details","raw_parts","split","filter","i","length","raw_part","raw_items","items","push","type","QUERY_TYPE","REG_CANDIDATE_BLOCK","REG_WORD_HANZI","REG_WORD_DETAILS","query","html","log","explains","raw_block","block","primary","from","to","REG_WORD_KANJI","REG_WORD_KANA","REG_WORD_ROMAN","REG_WORD_MP3","secondary","tertiary","mp3","OPTIONS","VOID_CALLBACK","options","Object","assign","proxy","set","cors_proxy","jp2cn","parser","cn2jp","option","encodeURI","data","returns"],"mappings":"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"}