{"version":3,"file":"hjdict.js","sources":["../src/utils.js","../src/parser/commons.js","../src/parser/cn-jp.js","../src/parser/jp-cn.js","../src/index.js"],"sourcesContent":["let to_unicode = (text) => {\n  return text.replace(/\\\\u[\\dA-F]{4}/gi, match => {\n    return String.fromCharCode(parseInt(match.replace(/\\\\u/g, ''), 16));\n  })\n}\n\nlet request = (fetch, url, callback) => {\n  fetch(url)\n    .then(r => r.text())\n    .then(raw => {\n      let text = to_unicode(raw)\n        .replace(/\\\\t/g, '') // Remove redundant slash\n        .replace(/\\\\\"/g, '\"') // Remove redundant slash\n      callback(text)\n    }).catch(e => {\n      console.error(e)\n      callback(null, e)\n    })\n}\n\nlet match_group = (string, regx, index, value) => {\n  if (index == null)\n    index = 1\n\n  let matches = string.match(regx)\n  if (!matches)\n    return value\n  return matches[index] || value\n}\n\nexport { to_unicode, request, match_group }\n","import { match_group } from '../utils'\r\n\r\nconst REG_WORD_DETAILS_EXAMPLE_LIST = /<img.*?>(.*?)\\/(.*)/\r\nconst REG_WORD_DETAILS_PART_OF_SPEECH = /【(.*?)】/\r\n\r\nexport function cnjp_parse_details(raw_details) {\r\n  raw_details = (raw_details || '').trim()\r\n  let details = []\r\n  let raw_parts = raw_details.split('<b>').filter(i => { return i && i.trim() }) || []\r\n  if (raw_parts.length) {\r\n    for (let raw_part of raw_parts) {\r\n      let raw_items = (raw_part\r\n          .split('</b>')[1] || '')\r\n        .split('<br/>')\r\n        .filter(i => { return i && i.trim() })\r\n      let items = []\r\n      for (let i of raw_items) {\r\n        let matches = i.match(REG_WORD_DETAILS_EXAMPLE_LIST)\r\n        if (matches) {\r\n          items.push({\r\n            type: 'list',\r\n            jp: matches[1],\r\n            cn: matches[2]\r\n          })\r\n        } else {\r\n          items.push({ type: 'text', text: i.trim() })\r\n        }\r\n      }\r\n      details.push({\r\n        part_of_speech: match_group(raw_part, REG_WORD_DETAILS_PART_OF_SPEECH),\r\n        items\r\n      })\r\n    }\r\n  } else if (raw_details) {\r\n    details.push({ items: [{ type: 'text', text: raw_details }] })\r\n  }\r\n  return details\r\n}\r\n","import { match_group } from '../utils'\r\nimport { cnjp_parse_details } from './commons'\r\n\r\nconst QUERY_TYPE = 'cj'\r\nconst REG_CANDIDATE_BLOCK = /<div style=\"clear:both\">(.*?<div id=\"com_panel_.*?<\\/div>)/g\r\nconst REG_NODATA = /id='hjd_nodata_msg'>(.*?)<\\/div>/\r\nconst REG_WORD_HANZI = /<span class=\"hjd_Green\">\\[(.*?)\\]<\\/span>/\r\nconst REG_WORD_DETAILS = /class=\"hjd_jp_explain\">(.*?)<\\/div>/\r\n\r\nexport default {\r\n  url(query) {\r\n    return 'http://dict.hjenglish.com/services/huaci/jp_web_ajax.ashx?type=' + QUERY_TYPE + '&w=' + query\r\n  },\r\n  parser(html) {\r\n    let explains = []\r\n    let found = false\r\n    let matches = html.match(REG_CANDIDATE_BLOCK)\r\n    if (matches) {\r\n      found = true\r\n      for (let raw_block of matches) {\r\n        let block = {}\r\n        block.primary = match_group(raw_block, REG_WORD_HANZI)\r\n        block.details = cnjp_parse_details(match_group(raw_block, REG_WORD_DETAILS))\r\n        explains.push(block)\r\n      }\r\n    }\r\n    return { from: 'cn', to: 'jp', explains, found }\r\n  }\r\n}\r\n","import { match_group } from '../utils'\r\nimport { cnjp_parse_details } from './commons'\r\n\r\nconst QUERY_TYPE = 'jc'\r\nconst REG_CANDIDATE_BLOCK = /<div style=\"clear:both\">(.*?<div id=\"com_panel_.*?<\\/div>)/g\r\nconst REG_WORD_KANJI = /<span class=\"hjd_Green\">\\[<font color=red>(.*?)<\\/font>\\]<\\/span>/\r\nconst REG_WORD_KANA = /<span title=\"假名\">\\[(.*?)\\]<\\/span>/\r\nconst REG_WORD_ROMAN = /<span title=\"罗马音\".*?\\[(.*?)\\]<\\/font><\\/span>/\r\nconst REG_WORD_MP3 = /class=\"hjd_fl\">(.*?)<\\/span>/\r\nconst REG_WORD_DETAILS = /class=\"hjd_jp_explain\">(.*?)<\\/div>/\r\n\r\nexport default {\r\n  url(query) {\r\n    return 'http://dict.hjenglish.com/services/huaci/jp_web_ajax.ashx?type=' + QUERY_TYPE + '&w=' + query\r\n  },\r\n  parser(html) {\r\n    let explains = []\r\n    let found = false\r\n    let matches = html.match(REG_CANDIDATE_BLOCK)\r\n    if (matches) {\r\n      found = true\r\n      for (let raw_block of matches) {\r\n        let block = {}\r\n        block.primary = match_group(raw_block, REG_WORD_KANJI)\r\n        block.secondary = match_group(raw_block, REG_WORD_KANA)\r\n        block.tertiary = match_group(raw_block, REG_WORD_ROMAN)\r\n        block.mp3 = match_group(raw_block, REG_WORD_MP3)\r\n        block.details = cnjp_parse_details(match_group(raw_block, REG_WORD_DETAILS))\r\n        explains.push(block)\r\n      }\r\n    }\r\n    return { from: 'jp', to: 'cn', explains, found }\r\n  }\r\n}\r\n","import { request } from './utils'\nimport { jp2cn, cn2jp } from './parser/index'\n\nlet OPTIONS = {\n  cors_proxy: 'https://crossorigin.me/',\n  fetch: null\n}\n\ntry {\n  OPTIONS.fetch = window.fetch\n} catch (e) {}\n\nlet VOID_CALLBACK = function () {}\n\nexport default {\n  version: '0.0.5',\n  set(options) {\n    OPTIONS = Object.assign(OPTIONS, options)\n  },\n  set_cors_proxy(proxy) {\n    this.set({ cors_proxy: proxy })\n  },\n  set_fetch(fetch) {\n    this.set({ fetch: fetch })\n  },\n  jp2cn(query, callback) {\n    this.query({\n      parser: jp2cn.parser,\n      url: jp2cn.url,\n      query,\n      callback\n    })\n  },\n  cn2jp(query, callback) {\n    this.query({\n      parser: cn2jp.parser,\n      url: cn2jp.url,\n      query,\n      callback\n    })\n  },\n  query(option) {\n    option = Object.assign({}, OPTIONS, option)\n\n    if (!option.fetch)\n      throw Error('Missing \"fetch\" function. ' +\n        'If you are using Node.js, you should use \"set_fetch\" before query.\\n' +\n        'For more details, please refer to: https://github.com/antfu/hjdict#node')\n\n    let url = option.url(option.query)\n    url = encodeURI(url)\n    if (option.cors_proxy) {\n      if (typeof option.cors_proxy === 'function')\n        url = option.cors_proxy(url)\n      else\n        url = option.cors_proxy + url\n    }\n\n    var html = request(option.fetch, url, (data, e) => {\n      let returns = {\n        query: option.query\n      }\n\n      if (e) {\n        returns.error = e\n      } else {\n        returns = Object.assign(returns, option.parser(data))\n      }\n\n      (option.callback || VOID_CALLBACK)(returns)\n    })\n  }\n}\n"],"names":["to_unicode","text","replace","String","fromCharCode","parseInt","match","request","fetch","url","callback","then","r","raw","catch","error","e","match_group","string","regx","index","value","matches","REG_WORD_DETAILS_EXAMPLE_LIST","REG_WORD_DETAILS_PART_OF_SPEECH","cnjp_parse_details","raw_details","trim","details","raw_parts","split","filter","i","length","raw_part","raw_items","items","push","type","QUERY_TYPE","REG_CANDIDATE_BLOCK","REG_WORD_HANZI","REG_WORD_DETAILS","query","html","explains","found","raw_block","block","primary","from","to","REG_WORD_KANJI","REG_WORD_KANA","REG_WORD_ROMAN","REG_WORD_MP3","secondary","tertiary","mp3","OPTIONS","window","VOID_CALLBACK","options","Object","assign","proxy","set","cors_proxy","jp2cn","parser","cn2jp","option","Error","encodeURI","data","returns"],"mappings":"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"}